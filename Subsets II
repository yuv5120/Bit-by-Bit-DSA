Problem Restatement
Input: integer array nums (may contain duplicates).
Task: return all unique subsets (the power set).
Each subset must not appear twice.
Answer can be in any order.

**
Approach:
Use backtracking to generate subsets.
Sort the input first â†’ duplicates will be next to each other.
While exploring choices, skip duplicates:
If nums[i] == nums[i-1] and i > start, skip to avoid duplicate subsets.

** CODE:
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> result;
        vector<int> current;
        backtrack(0, nums, current, result);
        return result;
    }
    
    void backtrack(int start, vector<int>& nums, vector<int>& current, vector<vector<int>>& result) {
        result.push_back(current);
        for (int i = start; i < nums.size(); i++) {
            if (i > start && nums[i] == nums[i - 1]) continue;
            current.push_back(nums[i]);
            backtrack(i + 1, nums, current, result);
            current.pop_back();
        }
    }
};

Time Complexity : O(2^n)
