You are given an array prices where prices[i] is the price of a given stock on the ith day. 
You want to maximize your profit by choosing a single day to buy one stock and choosing a 
different day in the future to sell that stock. 
Return the maximum profit you can achieve from this transaction. 
If you cannot achieve any profit, return 0.

Approach:
We want:
Buy at a minimum price (seen so far).
Sell at a future maximum price (relative to that minimum).
So while scanning the array:
Track the minimum price seen so far.
For each day, compute potential profit = prices[i] - minPrice.
Keep the maximum profit across all days.

CODE:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        int buyPrice = INT_MAX;
        for(auto i : prices){
            buyPrice = min(buyPrice,i);
            profit = max(profit, i - buyPrice);
        }
        return profit;
    }
};

Time Complexity: O(n) 
Space Complexity: O(1) 
